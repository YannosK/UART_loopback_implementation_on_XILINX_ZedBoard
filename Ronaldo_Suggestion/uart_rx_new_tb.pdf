library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity uart_rx_tb is
end uart_rx_tb;

architecture Behavioral of uart_rx_tb is
    constant C_CLK_PERIOD : time := 10 ns; 

    signal clk       : STD_LOGIC := '0';
    signal reset     : STD_LOGIC := '0';
    signal baud_tick : STD_LOGIC;
    
    signal RX_read   : STD_LOGIC := '0';
    signal RX_Data   : STD_LOGIC_VECTOR(7 downto 0);
    signal RX_valid  : STD_LOGIC;
    signal RxD       : STD_LOGIC := '1'; 

    signal data      : STD_LOGIC_VECTOR(9 downto 0) := "0110101101";
    
begin
    baud_gen: entity work.baud_gen
        Port map (
            clk => clk,
            reset => reset,
            en_16x_tick => baud_tick
        );
    
    uart_tx : entity work.UART_receiver
        Port map (
            clock    => baud_tick,
            reset    => reset,
            RX_Read  => RX_Read,
            RX_Data  => RX_Data,
            RX_valid => RX_valid,
            RxD      => RxD
        );
        
    clk_process :process
    begin
        wait for C_CLK_PERIOD / 2;
        clk <= not clk;
    end process;

    stim_proc: process
    begin
        reset <= '1';
        wait for 100 ns;
        reset <= '0';
        
        for i in 0 to 9 loop
            RxD <= data(i);
            for j in 0 to 15 loop
                wait until rising_edge(baud_tick);
            end loop; 
        end loop;
        
        RxD <= '1';
        
        wait until RX_Valid = '1';
        RX_Read <= '1';
        
        wait;
    end process;

end Behavioral;

